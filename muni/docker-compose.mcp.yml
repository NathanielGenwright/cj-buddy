# MCP MySQL Server Docker Compose Configuration
# This file adds the MCP server as a Docker service for easier management

version: '3.8'

services:
  mcp-mysql-server:
    build:
      context: mcp-servers/mysql-readonly
      dockerfile: Dockerfile
    container_name: muni-mcp-mysql
    hostname: mcp-mysql-server
    restart: unless-stopped
    
    environment:
      # Database connections (use Docker service names)
      - MYSQL_DEV_HOST=bdb-dev
      - MYSQL_DEV_PORT=3307
      - MYSQL_DEV_DATABASE=${BDBDEV_NAME}
      - MYSQL_DEV_USER=${BDBDEV_USER}
      - MYSQL_DEV_PASSWORD=${BDBDEV_PASS}
      
      - MYSQL_TEST_HOST=bdb-test
      - MYSQL_TEST_PORT=3308
      - MYSQL_TEST_DATABASE=${BDBTEST_NAME:-billingdbtest}
      - MYSQL_TEST_USER=${BDBTEST_USER}
      - MYSQL_TEST_PASSWORD=${BDBTEST_PASS}
      
      # MCP Server configuration
      - MCP_SERVER_PORT=3333
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_MAX_CONNECTIONS=10
      - MCP_QUERY_TIMEOUT=30000
      - MCP_READ_ONLY=true
      - MCP_SSL_MODE=preferred
      - MCP_ENABLE_LOGGING=true
      - MCP_LOG_QUERIES=true
      
      # Development settings
      - NODE_ENV=development
    
    ports:
      - "3333:3333"  # MCP server port
    
    volumes:
      - ./mcp-servers/mysql-readonly:/app
      - mcp-logs:/app/logs
    
    networks:
      - muni-network
    
    depends_on:
      - bdb-dev
      - bdb-test
    
    healthcheck:
      test: ["CMD", "node", "/app/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    labels:
      - "traefik.enable=false"
      - "com.docker.compose.service=mcp-mysql"
      - "description=MCP MySQL server for AI database access"

volumes:
  mcp-logs:
    name: muni-mcp-logs

networks:
  muni-network:
    external: true
    name: muni_default